#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Scala goodies for CompProg
#+CATEGORY: 
#+PROPERTY: header-args:sql             :engine postgresql  :exports both :cmdline csc370
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results output :flags -std=c++14 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output  :colnames yes
#+OPTIONS: ^:nil

* Conversions

| Iterator | toArray    |                         |
|          | toList     |                         |
|          | toSet      |                         |
|          | mkString   | Can include a separator |
| string   | toInt      |                         |
|          | BigInt(st) |                         |
|          | toFloat    |                         |

** how to check if a string would convert

#+BEGIN_SRC scala
import scala.util.Try
Try(x.toDouble).isSuccess
#+END_SRC


* Functions

| abs | Math.abs | 


* Input

** Read one line

#+BEGIN_SRC  scala
val tests = scala.io.StdIn.readLine().toInt
#+END_SRC


** Read all lines until certain condition

It is an iterator. Optionally convert to Array or List depending on processing

- takeWhile can specify any condition


#+BEGIN_SRC scala
(* until end of file *)
val lines = Iterator.continually(scala.io.StdIn.readLine()).takeWhile(x => x != null).toList
#+END_SRC

** Read n lines

#+BEGIN_SRC scala
val lines = Iterator.continually(scala.io.StdIn.readLine()).take(r).toArray
#+END_SRC

** read each line and process

#+BEGIN_SRC scala
Iterator.continually(scala.io.StdIn.readLine()).takeWhile(_ != null).foreach(l=>process(l))
#+END_SRC

* Output

** format output

Scanf type

#+BEGIN_SRC scala
println("%.1f".format(x._3*ratio))
#+END_SRC

* Algorithms

** gsd

#+BEGIN_SRC scala
  def gcd(a:Int, b:Int):Int =
    if (b == 0)
      a
   else
      gcd(b, a % b)
#+END_SRC

** Sort

descending order

#+BEGIN_SRC 
sortWith(_ < _)
#+END_SRC

** Foreach in a range

Equivalent to the usually for loop

#+BEGIN_SRC scala
1 to x foreach { i => 
}
#+END_SRC


** permutations

List(1,2,3).permutations.

** combinations

val words = List(1,2,2).toSet.subsets.map(_.toList).toList

* Mutable

#+BEGIN_SRC scala
import scala.collection.mutable.{HashMap, Map}
#+END_SRC

* Maps

** Convert array into map

- this breaks a set of lines into a map 
- be careful if the first column is repeated

#+BEGIN_SRC scala
val locsM = lines.map{x =>
  val Array(a,b) = x.split(' ').map(y=>y.toInt)
  (a->b)
}.toMap
#+END_SRC

** getOrElse

#+BEGIN_SRC scala
// states is a map
states.getOrElse("FOO", "No such state")
#+END_SRC

** Declare them


#+BEGIN_SRC scala
var save:Map[(Int,List[Int]),Set[Int]] = Map()
#+END_SRC

** map to ordered map: ListMap

#+BEGIN_SRC 
import scala.collection.immutable.ListMap

val result = ListMap(animals.toSeq.sortBy(_._1):_*).map{case(k,v) => s"$k | $v"}
#+END_SRC


* priority queue

#+BEGIN_SRC scala
import scala.collection.mutable.PriorityQueue

case class Donut(name: String, price: Double)

def donutOrder(d: Donut) = d.price

val priorityQueue1: PriorityQueue[Donut] = PriorityQueue(
 Donut("Plain Donut", 1.50),
 Donut("Strawberry Donut", 2.0),
 Donut("Chocolate Donut", 2.50))(Ordering.by(donutOrder))
println(s"Elements of priorityQueue1 = $priorityQueue1")

priorityQueue1.enqueue(Donut("Vanilla Donut", 1.0))

#+END_SRC

* Memoize

- Should it be a var? I *think* so

#+BEGIN_SRC scala
var save:Map[(Int,List[Int]),Set[Int]] = Map()

def my_partitions(size: Int, part: List[Int]): Set[Int] = { 
   if (save.contains((size,part))) {
      save((size,part))
   } else {
    (* whatever *)
      val result = ...
      save += ((size, part)-> result)
      result
   }
}
#+END_SRC

** check if element include

#+BEGIN_SRC 
if (penalty.contains(problem)) 
  penalty(problem) += 1
else
  penalty += (problem -> 1)
}
#+END_SRC

** Mutable 

#+BEGIN_SRC scala
var penalty : scala.collection.mutable.Map[String,Int] = scala.collection.mutable.Map()
#+END_SRC

** with default value

non mutable

#+BEGIN_SRC scala
val m = Map[Int, Int]().withDefaultValue(0)
#+END_SRC

** processing the "values"

#+BEGIN_SRC scala
val totalTime = good.map(_._2).sum
#+END_SRC



* Sets

** Ops

| x1 union x2     |                                 |
| x1 intersect x2 |                                 |
| x1 diff x2      |                                 |
| x1.empty        | returns an empty set of x1 type |
| xs contains x   |                                 |
| xs subsetOf yx  | is xs a subset of yx            |

** Mutable

| xs += elem      |                                         |
| xs -= elem      |                                         |
| xs ++= otherSet |                                         |
| xs retain p     | retain elements that satisfy p          |
| xs.clear        |                                         |
| xs clone        | create a new set                        |
| xs.update(x,b)  | if b true, add to x, otherwise remove x |


#+BEGIN_SRC 

#+END_SRC

* Strings

** Prefix of a string

| st toLowerCase    |
| st contains st2   |
| st startsWith st2 |
| st equalsIgnoreCase st2 |


* Dates

** get parts of the date

#+BEGIN_SRC scala
val today = Calendar.getInstance().getTime()
val now = Calendar.getInstance()
now.get(Calendar.MINUTE)
now.get(Calendar.HOUR)
now.get(Calendar.MONTH)
now.get(Calendar.DAY_OF_WEEK)
now.get(Calendar.DAY_OF_MONTH)
now.get(Calendar.DAY_OF_WEEK_IN_MONTH)
now.get(Calendar.DAY_OF_YEAR)
now.get(Calendar.WEEK_OF_YEAR)
#+END_SRC

** parse a date

#+BEGIN_SRC scala
import java.text.DateFormat; 
import java.text.ParseException; 
import java.text.SimpleDateFormat; 
import java.util.Date; 
 
DateFormat df = new SimpleDateFormat("dd/MM/yyyy"); 
try { 
  Date today = df.parse("19/08/2011");
  System.out.println("Today = " + df.format(today));
} 
catch (ParseException e) 
{
e.printStackTrace(); 
} 
#+END_SRC

** convert string to time 

#+BEGIN_SRC scala
// times contains collection of times 12:00 p.m. or 11:30 a.m.
      val times = lines.map( l => {
        val pm = 60 *12 * 60;
        val x = l.split("[: ]")
        val h = x(0).toInt 

        (l,
          (if (h == 12) 0 else h) * 60 +
          x(1).toInt +
          pm * (if (x(2) == "a.m.") 0 else 1))
        
      })
#+END_SRC

** convert dates

#+BEGIN_SRC scala
    val date = new SimpleDateFormat("y/M/d").parse(s"2009/${month}/${day}")

    val dayweek = new SimpleDateFormat("EEEE").format(date)

    println(dayweek)

/*
    val cal = Calendar.getInstance()
    cal.setTime(date)
    val dow = cal.get(Calendar.DAY_OF_WEEK)
    println(dow)
    println(names(dow-1))
 */
#+END_SRC



* generics

** Breaking a loop

#+BEGIN_SRC scala
var last = 0
(x to 1 by -1).iterator.takeWhile(i => !condition).foreach(i => {
   assert(!flag)
   last = i
})
if (last != 1) {
   // we "broke" the loop
}
 
#+END_SRC

* Tuples

** process tuples

If we need to process lists of tuples

#+BEGIN_SRC scala
// penalty is a collection of tuples
val totalPenalty = penalty.map({case (problem,count) =>
})
#+END_SRC



* Regular expressions

** Simple substitution

with a lambda

#+BEGIN_SRC scala
val regex = "[0-9][0-9]?".r
val z = regex.replaceAllIn(x, x => rename(x.toString.toInt))
#+END_SRC

** with backreferences

#+BEGIN_SRC scala
val st = readLine()
val st.replaceAll("([aeiou])p\\1", "$1")
#+END_SRC
    

** Complex substitution

with a lambda...

#+BEGIN_SRC scala
val cons = "([^aeiou]+)([^ ]+)".r
val z = cons.replaceAllIn(line, _ match { case cons(pre, rest) => "[" + rest + pre + "]"})
#+END_SRC

** matching

#+BEGIN_SRC scala
val cons = "(^[^aeiou]+)(.*)".r
cons.findFirstIn(w) match {
  case Some( cons(pre,rest)) => rest + pre + "ay"
  case None => {
    w + "yay"
  }
}

#+END_SRC

** a different method

see above for fail safe method (using option)

#+BEGIN_SRC scala
val pattern = "([0-9\\.]+) ([a-z]+) in ([a-z]+)".r
val pattern(amount, nameFromRaw, nameToRaw) = line
#+END_SRC

* Chars

| toUpper|
| toLower|

* Algorithms

** Fast fibonnacci

this implementation is mode 1e10

#+BEGIN_SRC scala
import scala.collection.mutable.{HashMap, Map}

var fib:Map[Long,Long] = Map();

def fastFibo(i: BigInt):BigInt = {

  if (fib.contains(i)) {
    fib(i);
  } else {
    if (i ==1 || i ==2) {
      fib(i)=1;
    } else {
      val i_half:BigInt = i / 2;
      val f_k:BigInt= fastFibo(i_half);
      val f_k_plus_1:BigInt= fastFibo(i_half+1);
      val r:BigInt = 
        if (i %2 == 0) 
          (f_k * (2 * f_k_plus_1 - f_k)) % BigInt(1000000000)
        else 
          (f_k_plus_1 * f_k_plus_1 + f_k * f_k) % BigInt(1000000000)
      ;

      fib(i) = if (r<0) r+1000000000 else r;
    }
    fib(i);
  }
}
#+END_SRC

* Queens

as it is usual, pos is an array of n board


#+BEGIN_SRC scala
    def check_row(row:Int, pos: Array[Int]): Boolean = {
      val col = pos(row)
//      assert(col >=0 && col <8)
      0 to (row-1) foreach { r =>
        val c = pos(r)
        if (col == c ||
          (col - c).abs == (row-r).abs)
          return false;
      }
      return true;
    }


    def check(pos:Array[Int]):Boolean = {
      1 to pos.size-1 foreach { i=>
        if (!check_row(i, pos))
          return false;
      }
      return true;
    }


#+END_SRC

#+BEGIN_SRC scala
object Nqueen {
  type Queen = (Int, Int)
  type Solutions = List[List[Queen]]

  def main(args: Array[String]) {
    val size: Int = args match {
      case Array() => sys.error("Provide a board size")
      case Array(n) => n.toInt
    }
    def placeQueens(n: Int): Solutions = n match {
      case 0 => List(Nil)
      case _ => for {
          queens <- placeQueens(n -1)
          y <- 1 to size
          queen = (n, y)
          if (isSafe(queen, queens))
        } yield queen :: queens
      }
    val solutions = placeQueens(size)
    println(solutions.size + " solutions found")
    // print the board of the first solution
    for (queen <- solutions.head; x <- 1 to size) {
      if (queen._2 == x) print("Q ") else print(". ")
      if (x == size) println()
    }
  }

  def isSafe(queen: Queen, others: List[Queen]) =
    others forall (!isAttacked(queen, _))

  def isAttacked(q1: Queen, q2: Queen) =
    q1._1 == q2._1 ||
    q1._2 == q2._2 ||
    (q2._1-q1._1).abs == (q2._2-q1._2).abs
}
#+END_SRC

* Trees

A simple tree with no values in nodes

#+BEGIN_SRC scala
package examples

/** Illustrate the use of pattern matching in Scala. */
object patterns {
  
  /** We need an abstract base class for trees. Subclasses with 
   *  the 'case' modifier can be used in pattern matching expressions 
   *  to deconstruct trees. 
   */
  abstract class Tree
  case class Branch(left: Tree, right: Tree) extends Tree
  case class Leaf(x: Int) extends Tree

  /** Case classes have an implicit constructor methods which allows 
   *  to create objects withouth the 'new' keyword. It saves some typing 
   *  and makes code clearer. 
   */
  val tree1 = Branch(Branch(Leaf(1), Leaf(2)), Branch(Leaf(3), Leaf(4)))

  /** Return the sum of numbers found in leaves. 
   *  'match' is a generalization of 'switch' in C-like languages 
   * 
   *  Patterns consist of case class constructors (which can 
   *  be nested), and lower case variables which are 
   *  bound to the values with which the class has been constructed. 
   */
  def sumLeaves(t: Tree): Int = t match {
    case Branch(l, r) => sumLeaves(l) + sumLeaves(r)
    case Leaf(x) => x
  }

  /** This illustrates the use of Option types. Since the 
   *  method is not known in advance to find 'x', the 
   *  return type is an Option. Options have two possible 
   *  values, either 'Some' or 'None'. It is a type-safe 
   *  way around 'null' values. 
   */
  def find[A, B](it: Iterator[(A, B)], x: A): Option[B] = {
    var result: Option[B] = None
    while (it.hasNext && result == None) {
      val Pair(x1, y) = it.next
      if (x == x1) result = Some(y)
    }
    result
  }

  def printFinds[A](xs: List[(A, String)], x: A) =
    find(xs.elements, x) match {
      case Some(y) => println(y)
      case None => println("no match")
    }

  def main(args: Array[String]) {
    println("sum of leafs=" + sumLeaves(tree1))
    printFinds(List((3, "three"), (4, "four")), 4)
  }
}
#+END_SRC

Another tree implementation with values in nodes

#+BEGIN_SRC scala

abstract class Tree
case class Branch(x:Int, left: Tree, right: Tree) extends Tree
case class Leaf(x: Int) extends Tree
case object Empty extends Tree

val tree1 = Branch(30, Branch(10, Leaf(1), Leaf(2)), Branch(20, Leaf(3), Leaf(4)))

def sumLeaves(t: Tree): Int = t match {
  case Branch(i, l, r) => sumLeaves(l) + sumLeaves(r) + i
  case Leaf(x) => x
  case _ => 0
}

def printTree(t: Tree):Unit = {

  def print_h(t:Tree, indent: Int):Unit = {
    val prefix = " " * indent ;
    t match {
      case Branch(i, l, r) =>
        println(prefix + s"branch: $i" )
        println(prefix + s"Left" )
        print_h(l, indent + 3);
        println(prefix + s"Right" )
        print_h(r, indent + 3)
      case Leaf(x) =>
        println(prefix + s"leaf [$x]")
      case _ => ()
    }
  }
  print_h(t, 0);
}

// this functions requires more testing

def delete(t:Tree, x:Int):Tree = t match {
  case Branch(i,l,r) =>
    if (i == x) {
      (l,r) match  {
        case (Empty,Empty) => Empty
        case (Empty, _) => r
        case (_, Empty) => l
        case (Leaf(x1), _) => Branch(x1, Empty, r)
        case (Branch(x1, _, _),_) =>
          Branch(x1, delete(l,x1), r)
      }
    }
    else if (x < i)
      Branch(i, delete(l, x), r)
    else
      Branch(i, l, delete(r, x))
  case Leaf(i) =>
    if (i == x)
      Empty
    else
      t
  case Empty =>
    t
}

def insert(t:Tree, x:Int):Tree = t match {
  case Branch(i,l,r) =>
    if (x <= i)
      Branch(i, insert(l, x), r)
    else
      Branch(i, l, insert(r, x))
  case Leaf(i) =>
      if (x < i)
        Branch(i, Leaf(x), Empty)
      else
        Branch(i, Empty, Leaf(x))
  case Empty =>
    Leaf(x)
}

def build(xs: List[Int]) : Tree  = {

  def build_h(acc: Tree, xs: List[Int]) : Tree = {
    xs match {
      case Nil => acc
      case head::tail => build_h(insert(acc, head), tail)
    }
  }
  build_h(Empty, xs)
}

println("sum of leafs=" + sumLeaves(tree1))
printTree(tree1)

println("Done---")

val tree2 = insert(insert(insert(Empty, 5),10),40);
printTree(tree2)
println("Done---")

printTree(build( List(1,2,3,4) ))

println("Done-----------------")

printTree(build( List(2, 9, 4, 5, 7, 8, 9, 2,1,0,2)))

print(tree2)
#+END_SRC

* Catalan numbers

#+BEGIN_SRC scala
val catalan = new Array[BigInt](10001)
catalan(0) = BigInt(1)
0 to 4999 foreach { n =>
  catalan(n+1) = (2*(2*n+1) * catalan(n))/(n+2)
}
#+END_SRC

* sum Odd numbers in pascal triangle row

#+BEGIN_SRC scala
var save:Map[BigInt, BigInt] = Map()

def odd(n:BigInt):BigInt = {

  if (save.contains(n)) {
    save(n)
  } else {
    val result:BigInt =
      if (n == 0) {
        0
      } else if (n == 1) {
        1
      } else if (n % 2 == 0) {
        3 * odd(n / 2)
      } else {
        2*odd(n/2) + odd(n/2+1)
      }
    save += (n -> result)
    result
  }
}
#+END_SRC

* idioms

** sort a map by value, converts it into a sequence

scala> import scala.collection.immutable.ListMap
import scala.collection.immutable.ListMap

scala> ListMap(grades.toSeq.sortBy(_._1):_*)
res0: scala.collection.immutable.ListMap[String,Int] =
  Map(Al -> 85, Emily -> 91, Hannah -> 92, Kim -> 90, Melissa -> 95)


#+BEGIN_SRC scala

#+END_SRC

** convert a map to a groupby by count

#+BEGIN_SRC scala
// dice is an iterator/collection
val counts = dice.groupBy(identity).mapValues(_.size)
#+END_SRC

** finding the elements in the map with the maximum values

#+BEGIN_SRC scala
//counts is a map

val max = counts.valuesIterator.max

val result = counts.filter(_._2 == max).map(_._1).toList.sorted.mkString("\n")

#+END_SRC

** finding maximum in a list with index

#+BEGIN_SRC scala
List(0, 43, 1, 34, 10).zipWithIndex.maxBy(_._1)._2 
#+END_SRC

** fold with a tuple

#+BEGIN_SRC scala
    val ch = st.foldLeft((0,0)){ (acc:Tuple2[Int,Int],c:Char) =>
      val next = acc._2 match {
        case 0 => if (c == 'P') 0 else 1
        case 1 => if (c == 'E') 0 else 1
        case 2 => if (c == 'R') 0 else 1
      }
      (acc._1 + next, (acc._2 + 1) % 3)
    }._1
#+END_SRC


* sbt

set scalacOptions in ThisBuild ++= Seq("-unchecked", "-deprecation")

** create a standalone jar

#+BEGIN_SRC example
publishLocal
#+END_SRC



* flatmap

** convert a list of strings (some of then non-numbers) to numbers

#+BEGIN_SRC scala
val strings = Seq("1", "2", "foo", "3", "bar")
strings.flatMap(toInt)
#+END_SRC

** remove NONE from list of options, and remove some too

#+BEGIN_SRC scala
val strings = Seq("1", "2", "foo", "3", "bar")
strings.flatMap(toInt)
#+END_SRC

* views

iterating only once over a zip...


#+BEGIN_SRC scala

    sol.view.zipWithIndex.count{ case (c,i) =>
      c == ans(i % len)
    }


    counts.view.zip(names).filter(_._1 == max ).foreach{ p =>
      println(p._2)
    }

#+END_SRC

* Improve io

#+BEGIN_SRC scala
// URL: https://open.kattis.com/problems/sumkindofproblem
// difficulty: 1.5
// type: number theory
// keywords: io, slow, tle

import scala.io.StdIn._
import java.io.{BufferedReader, InputStreamReader,StreamTokenizer}


object  sum {

  def main(args: Array[String]) {

//    import java.io.{BufferedReader, InputStreamReader}
//    val input = Stream.continually(in readLine)

    var b = new StringBuilder
    val in = new BufferedReader(new InputStreamReader(System.in))

    val scanner = new StreamingScanner(in)

    //    val n = in.readLine().toInt
    val n = scanner.nextInt

    assert(n <= 10000)

    (1 to n).foreach { i=>

      val k = scanner.nextInt
      val n = scanner.nextInt

      val s = n * (n+1)/2
      //val s = (1 to n).sum
      val s2 = s * 2
      val s3 = s2 - n
       
      b ++= (k + " " + s + " "+ s3 + " " + s2 + "\n")
    }
    print(b)
  }
}

/**
 * Base interface to test
 */
abstract class AbstractScanner(protected[this] val reader: BufferedReader) {
  def hasNext: Boolean
  def next(): String
  def nextInt() = next().toInt
  def nextLine() = reader.readLine()
  def close() = reader.close()
}


class IteratorScanner(reader: BufferedReader) extends AbstractScanner(reader) with Iterator[String] {
  import java.util.StringTokenizer
  private[this] val tokenizers = Iterator.continually(reader.readLine()).takeWhile(_ != null).map(new StringTokenizer(_)).filter(_.hasMoreTokens)
  private[this] var current: Option[StringTokenizer] = None

  @inline private[this] def tokenizer(): Option[StringTokenizer] = current.find(_.hasMoreTokens) orElse {
    current = if (tokenizers.hasNext) Some(tokenizers.next()) else None
    current
  }
  override def hasNext = tokenizer().nonEmpty
  override def next() = tokenizer().get.nextToken()
  override def nextLine() = {
    current = None
    super.nextLine()
  }
}

class StreamingScanner(reader: BufferedReader) extends AbstractScanner(reader) with Iterator[String] {
  import java.io.StreamTokenizer
  private[this] val in = new StreamTokenizer(reader)

  override def hasNext = in.ttype != StreamTokenizer.TT_EOF
  override def next() = {
    in.nextToken()
    in.sval
  }
  override def nextInt() = nextDouble().toInt
  def nextDouble() = {
    in.nextToken()
    in.nval
  }
}


#+END_SRC

* running a command

#+BEGIN_SRC scaa
import scala.language.postfixOps
import java.io._

import sys.process._

  def runCommand(cmd: Seq[String]): (Int, String, String) = {
    val stdoutStream = new ByteArrayOutputStream
    val stderrStream = new ByteArrayOutputStream
    val stdoutWriter = new PrintWriter(stdoutStream)
    val stderrWriter = new PrintWriter(stderrStream)
    val exitValue = cmd.!(ProcessLogger(stdoutWriter.println, stderrWriter.println))
    stdoutWriter.close()
    stderrWriter.close()
    (exitValue, stdoutStream.toString, stderrStream.toString)
  }

#+END_SRC

* how to invert a map

#+BEGIN_SRC scala
// code is a map of char to string
val decode = code.map(_.swap)
// decode is a map from string to char
// not sure what happens if it is not biyective
#+END_SRC

* tail recursion

#+BEGIN_SRC scala
import scala.annotation.tailrec

  @tailrec
  def compute(x:Int, y:Int, acc:List[Int]): List[Int] = {
//        println(x,y)
    if (x == 1 && y == 1)
      acc
    else {
      if (x > y)
        compute(x-y, y, 1::acc)
      else
        compute(x, y-x, 0::acc)
    }
  }
#+END_SRC

* dates

* kadane algorithm for max subarray

#+BEGIN_SRC scala
    def kadane_max_subarray(a: Array[Int]):Int = {
      val result = (0 to a.size-1).foldLeft((0,0)){ case ((max_ending_here:Int,max_so_far:Int),i:Int)  =>

        val new_max_ending_here = Math.max(max_ending_here + a(i),0)
        
        (new_max_ending_here, Math.max(max_so_far, new_max_ending_here))
      }
      result._2
    }
#+END_SRC

* processess

#+BEGIN_SRC scala
    def run(proc: ProcessBuilder): (List[String], List[String], Int) = {

      var out = List[String]()
      var err = List[String]()

      val exit = proc ! ProcessLogger((s) => out ::= s, (s) => err ::= s)

      (out.reverse, err.reverse, exit)
    }


    println(args(0))

    val repo = args(0)
    
    val command = (s"git -C $repo ls-files" #| "grep xutils")

    val output = run(command)

    println(output)

#+END_SRC

run in parallel

#+BEGIN_SRC scala
import scala.io._
import sys.process._

object  process {

  
  def main(args: Array[String]) {

    def run(proc: ProcessBuilder): (List[String], List[String], Int) = {

      var out = List[String]()
      var err = List[String]()

      val exit = proc ! ProcessLogger((s) => out ::= s, (s) => err ::= s)

      (out.reverse, err.reverse, exit)
    }

    def withParallelism[A](numOfThread: Int, n : Int)(block :Int => A) : scala.collection.parallel.immutable.ParSeq[A] = {
      import scala.collection.parallel._
      val coll = (0 to n).par
      coll.tasksupport = new ForkJoinTaskSupport(new scala.concurrent.forkjoin.ForkJoinPool(numOfThread))
      coll.map(i => {
        // do something
        block(i)
      })
    }

    val out = withParallelism(4,20) { i=> 
      println(s"Starting $i")
      val out = run(Process(s"sleep 1"))
      println(s"Finishing $i")
      out
    }

    println(out)

 

  }
}

#+END_SRC
